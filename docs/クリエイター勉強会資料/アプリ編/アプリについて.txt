

#アプリの開発手法について
##ネイティブ実装（iOS(Objectiv-C,Swift)、Android(Java)、FirefoxOS(HTML5)）
各OSに応じた開発言語を用いてOSそれぞれでアプリを実装する開発方法


-長所
処理速度が早い
携帯自体の機能を使用できる（カメラ、マイク、センサーなど）
-短所
OSの種類ごとに開発が必要
更新しづらい（iOSは審査が必要）


##サードパーティ製フレームワーク
OS開発元以外の会社が提供しているモバイルアプリ開発フレームワークを用いて、
アプリを実装する開発方法
javascriptやHTMLなどを用いて開発をすることができ、
ビルドを行うことで、iOS(.ipa)やAndroid(.apk)それぞれの実行ファイルを作成できる。

代表的なものでAdobe社のPhoneGap(Cordova)、Appcelerator社のTitanium mobileなどがある


-長所
1ソースでiOSとAndroid両方のアプリが作れる
カメラ、マイクなどももちろん使える
Webアプリと比べて処理速度が速い
オフラインでも使用できる（通信が発生しないものに限る）
-短所
不具合が発見しづらい
OSがアップデートされても、プラットフォームが対応しないと実装することが出来ない
デバイスの機能を全て使えるとは限らない（使用するツールに依存する）
プラットフォームのバグがまぁまぁ多い
処理速度はネイティブと比べると遅い


##ハイブリッド実装(ネイティブ＋Webview)
ネイティブアプリをベースに、更新頻度の高いコンテンツや、
スマホの機能を使わないようなページをWebviewを使って
Webサイトで表示する方法。


-長所
コンテンツの追加／更新が容易に行える
-短所
処理速度が遅い
アプリっぽいUIが作りにくい
オンラインでないと使用できない


#アプリの開発の流れ
##アプリの設計について
-ワイヤーフレームの作成
手書きやエクセル等で画面の構成要素を書き起こす。
-画面遷移図の作成
どのボタンを押したらどの画面を開くか、
画面の依存関係を記した遷移図を作成する。
※最近は手書きで作ったフレームワークをプロトタイプ化してくれるアプリなんかもある。


-機能設計
アプリ側にどういった機能をもたせるか。
サーバー連携する場合、サーバー側でどういった処理を行うのか。
ハイブリッドアプリの場合、アプリとWebViewでどのようにブリッジ連携を行うか。




-デザイン
アプリのUIの設計・デザイン
*注意点*
機能によってはOS自体に標準で備えられているものもあるため、
デザインをするときは注意が必要です。


##開発
-パーツ作成
アプリ内で使用する画像パーツを作成する

-コーディング
下記の開発ツールでコーディングを行う
iOS（Xcode）
Android（Android Studio、ecripse）
FirefoxOS（テキストエディタ、Firefox）




#アプリ開発の重要なポイント
##ポイント1：開発前に引いておく「線」
##ポイント2：開発以外の「作業」

