/**
 * ajaxで外部ファイルを取得する
 */
$.ajax({
    url: jsonurl1,      //取得するデータのURL
    dataType: 'json',   //データタイプ json, xml, html, txtなど 
    cache: false,       //キャッシュさせるかどうか
    success : function(data){
        //取得に成功した時の処理を記述
    },
    error: function(data){
        //取得に失敗した時の処理を記述
    },
    complete : function(data){
        //成功・失敗にかかわらず、最後に行う処理を記述（任意）
    }
});

///////////////////////////////////////////

/**
 * GETパラメータを取得するメソッド
 * http://aaa.bbb.com?viewmode=001 の場合 001 を取得する。
 */
function getParamator(paramName){
    //Return
    var ret=null;
    //URL取得
    var url = location.href;
    //URL分割
    parameters = url.split("?");
    //パラメータあり
    if( parameters.length > 1 ) {
        //分割
        var params   = parameters[1].split("&");
        //パラメータ配列
        var paramsArray = [];
        //パラメータ数繰り返し
        for ( i = 0; i < params.length; i++ ) {
           var neet = params[i].split("=");
           paramsArray.push(neet[0]);
           paramsArray[neet[0]] = neet[1];
        }
        //Get Param
        ret = paramsArray[paramName];
    }
    //
    return ret;
};

///////////////////////////////////////////

/**
 * localstorageが使用可能かを確認
 */
var storage;    //localstorage
if (typeof localStorage === 'undefined') {
    //alert('Web Storage機能が実装されていません');
}else{
    //alert('Web Storage機能あります');
    storage = localStorage;
}

/**
 * localstorageに情報を格納
 */
 storage.setItem(key,val);


/**
 * localstorageから情報を削除
 */
 storage.removeItem(key,val);


/**
 * localstorage内にkeyが存在するかを確認
 * @param _key (String) キー
 * @return boolean 
 */
function existKey(_key){
    if(storage.getItem(_key)==null){
        //localstorageにkeyが存在しないとき
        //alert('key='+_key+'はありません');
        return false;
    }else{
        //localstorageにkeyが存在するとき
        //alert('key='+_key+'はあります');
        return true;
    }
}

//----------
// WebStorage
//----------
//オブジェクトへ変換
function setKeyValArray(_resarray){
    var _str = '';
    var _len = _resarray.length;
    var _keyarray = {};
    for(var i=0; i<_len; i++){
        _keyarray[ _resarray[i][0] ] = _resarray[i][1];
    }
    return _keyarray;
}
//配列へ変換
function reverseArray(_keyarray){
    var _str = '';
    var _array = [];
    var i = 0;
    for(var prop in _keyarray){
        _array[i] = [ String(prop) , String(_keyarray[prop])];
        i++;
    }
    return _array;
}
//取得
function getMyLocalStorage(){
    if(storage.getItem(storageName) != undefined){
        //alert('storageあり');
        resarray = JSON.parse(storage.getItem(storageName));
        keyarray = setKeyValArray(resarray);    //keyarrayオブジェクトへ変換
    } else {
        //alert('storage初回');
    }
}
//保存
function setMyLocalStorage(_id,_val){
    //alert('保存');
    keyarray[_id] = String(_val);
    array = reverseArray(keyarray); //配列に変換
    storage.setItem(storageName, JSON.stringify(array));
}




///////////////////////////////////////////

/**
 * 無限スクロール
 * ページ最下部に到達した時に情報の追加を行う
 */
var loadingFlg = false;     //ローディング中かどうか

$(window).load(function(){
    var loadWinHeight = $(window).height();
    var loadDocHeight = $(document).height();
    if(loadWinHeight >= loadDocHeight){
        //？通る？
        if(!loadingFlg){
            //ここの処理はいらないかも・・・・
            
        }
    }
}).scroll(function(){
    var winHeight = window.innerHeight ? window.innerHeight : $(window).height();
    posBottom = $(document).height() - winHeight;

    if($(this).scrollTop() == posBottom) {
        var adjScrTop = $(document).scrollTop();
        $('html,body').animate({scrollTop:(adjScrTop)-1},0);    //？
        if(!loadingFlg){
            loadingFlg = true;
            //ローディング中の処理を記述。処理が完了したらloadingFlgをfalseに戻す
    
        }
        return false;
    }
});


///////////////////////////////////////////

/**
 * 現在の日付を取得して変数にセットする
 */
 function setDate(){
    var insHtml = "";
    var myYear = "";
    var myMonth = "";
    var myDate = "";
    var myDay ="";
    var myTbl = new Array("日", "月", "火","水","木","金","土");

    myDay = new Date();
    myYear = myDay.getYear();
    myMonth = myDay.getMonth() + 1;
    myDate = myDay.getDate();
    if(myYear < 2000){
        myYear += 1900;
    }
 }

///////////////////////////////////////////

/**
 * センタリングする座標を配列で返す
 * @param {String} _selector セレクタ
 * @return {Array} セレクタの座標（横／縦）
 */
function getCenteringPos(_selector){
    //画面(ウィンドウ)の幅、高さを取得
    var w = $(window).width();
    var h = $(window).height();

    //コンテンツ(#modal-content)の幅、高さを取得
    var cw = $(_selector).outerWidth(true);
    var ch = $(_selector).outerHeight(true);
    return Array( ((w - cw)/2) , ((h - ch)/2) );
}

/**
 * リサイズした時にセンタリングを行う
 * @return array[] 座標（横／縦）
 */
$(window).resize(function(){
    var pixel = getCenteringPos();
    $('#modal-content').css({'left': pixel[0] + 'px','top': pixel[1] + 'px'});
});


/**
 * 配列のソート処理
 * @param field (String) ソートする項目
 * @param reverse (boolean) 昇順(false) or 降順(true)
 * @param primer (function) 変換処理(parseIntなど)
 */

//例：_array.sort(sort_by('rank', false, parseInt));

function sort_by(field, reverse, primer){
    reverse = (reverse) ? -1 : 1;
    return function(a,b){
        a = a[field];
        b = b[field];
        if (typeof(primer) != 'undefined'){
            a = primer(a);
            b = primer(b);
        }
        if (a<b) return reverse * -1;
        if (a>b) return reverse * 1;
        return 0;
    }
}


/**
 * 文字列からHTMLタグを削除
 * @param {String} _html 元となる文字列
 * @return {String} _str HTMLタグを削除した文字列
 */
 function trimHtmlTag(_html){
    var _str = _html.replace(/<("[^"]*"|'[^']*'|[^'">])*>/g,'');
    return _str;
 }

/**
 * デバイス判定
 */
var ua;
ua = {
    iPhone: navigator.userAgent.indexOf('iPhone') != -1,
    android: navigator.userAgent.indexOf('Android') != -1 && navigator.userAgent.indexOf('Mobile') != -1,
}


